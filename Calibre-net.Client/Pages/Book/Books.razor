@using Calibre_net.Shared.Contracts
@using Calibre_net.Shared
@using Calibre_net.Client.Components.Shared
@using Blazored.LocalStorage


@inject ApiClients.BookClient BookClient
@inject ApiClients.SearchClient SearchClient
@inject NavigationManager NavigationManager
@* @inject PersistentComponentState ApplicationState *@
@inject ILocalStorageService LocalStorage

@page "/books"
@page "/books/top-rated"
@page "/books/{*pageRoute}"
@* @attribute [StreamRendering] *@
@attribute [Authorize]

@rendermode InteractiveAuto

<PageTitle>Books</PageTitle>

<div class="search-page">
    <div class="search-top">
        @* <MudText Typo="Typo.h3" GutterBottom="true">Books</MudText> *@

        <div class="search-tags">
            @foreach (var term in SearchTerms)
            {
                var icon = term.GetIcon();
                <MudChip Color="Color.Primary" Icon="@icon" Variant="Variant.Outlined"
                    OnClose="() => RemoveSearchTerm(term)">

                    @if (term is NumericSearchTerm numTerm)
                    {
                        @(numTerm.NumericSearchOperator.ToEnumString())
                    }

                    @if (term is RatingSearchTerm ratingTerm)
                    {
                        <Calibre_net.Client.Components.Shared.StarRatingDisplay Value="@(ratingTerm.IntValue)" />
                    }
                    else if (term is IdSearchTerm idTerm)
                    {
                        @(string.IsNullOrEmpty(idTerm.ValueDisplayName) ? idTerm.Value : idTerm.ValueDisplayName)
                    }
                    else
                    {
                        @(term.Value)
                    }
                </MudChip>
                @* </div> *@
            }
        </div>
        <div>
            <BookOrder OrderChanged="OrderChanged" Orders="@Orders" />
        </div>
    </div>
    <div class="search-results">

        @if (BookList == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <div class="infinite-wrap infinite-scroll-hide">
                <InfiniteScrolling @ref="Infinite" ItemsProvider="GetBooks">
                    <ItemTemplate Context="book">
                        <BookThumb @key="book.Id" CalibreBook="@book" />
                    </ItemTemplate>
                    <LoadingTemplate>
                        <div class="book-thumb p-1 d-flex flex-column justify-center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    </LoadingTemplate>
                </InfiniteScrolling>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]    public string? PageRoute { get; set; }

    public List<SearchTerm> SearchTerms { get; set; } = [];

    IEnumerable<BookDto> BookList { get; set; } = null!;

    InfiniteScrolling<BookDto> Infinite { get; set; } = null!;

    private List<SearchOrderModel> Orders { get; set; } = [];


    @* private PersistingComponentStateSubscription persistingSubscription; *@


    void RemoveSearchTerm(SearchTerm term)
    {
        SearchTerms.Remove(term);
        var url = Orders.ToUrl(SearchTerms.ToUrl("/books/"));
        @* var url = "/books/" + SearchTerms.ToUrl() + Orders.ToUrl(); *@
        NavigationManager.NavigateTo(url);
    }

    private async Task<IEnumerable<BookDto>> GetBooks(InfiniteScrollingItemsProviderRequest request)
    {
        return await Task.FromResult(BookList.Skip(request.StartIndex).Take(30));
    }

@* 
    protected override async Task OnInitializedAsync()
    {
        persistingSubscription =
        ApplicationState.RegisterOnPersisting(PersistData);
    } *@

    @* private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(SearchTerms), SearchTerms);
        ApplicationState.PersistAsJson(nameof(BookList), BookList);
        ApplicationState.PersistAsJson(nameof(Orders), Orders);

        return Task.CompletedTask;
    } *@

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string OrderString = string.Empty;

            var dict = PageRoute.ParseStringToDictionary();
            if (dict.ContainsKey("order"))
            {
                OrderString = dict["order"];
                dict.Remove("order");
            }

            SearchTerms = dict.ToSearchTerms();
            var response = await SearchClient.SearchValueAsync(new GetSearchValuesRequest(SearchTerms, []));
            if (response != null)
                SearchTerms = response.Terms;

            if (NavigationManager.Uri.EndsWith("/books/top-rated"))
                SearchTerms = new List<SearchTerm>
{
new RatingSearchTerm{
Key = "rating",
Value = (9 / 2.0m).ToString(System.Globalization.CultureInfo.InvariantCulture),
NumericSearchOperator = NumericOperator.GreaterThan
}
};

            // first access (prerender)
            Orders = new() {
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.BOOK_LASTMODIFIED_TAG].Clone(),
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.BOOK_TITLE_TAG].Clone() ,
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.AUTHOR_SORT_TAG].Clone() ,
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.BOOK_PUBDATE_TAG].Clone(),
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.SERIES_SORT_TAG].Clone(),
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.RATING_TAG].Clone(),
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.PUBLISHER_SORT_TAG].Clone(),
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.LANGUAGE_TAG].Clone(),
(SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.FORMAT_TAG].Clone(),
};

            var ccResponse = await BookClient.Custom_columnsAsync();
            if (ccResponse != null)
                foreach (var cc in ccResponse.CustomColumns)
                {
                    var order =
                    (SearchOrderModel)SearchOrdersConstants.DefaultSearchOrders[SearchOrdersConstants.CUSTOM_COLUMN_TAG].Clone();
                    order.Key += cc.Id.ToString();
                    order.Type = SearchOrdersConstants.CUSTOM_COLUMN_TAG + cc.Id.ToString();
                    order.PropertyName = cc.Name;
                    Orders.Add(order);
                }

            if (string.IsNullOrEmpty(OrderString) && !string.IsNullOrEmpty(SearchTerms.ToUrl()))
                OrderString = await LocalStorage.GetItemAsync<string>(SearchTerms.ToUrl()) ?? string.Empty;

            if (!string.IsNullOrEmpty(OrderString))
                Orders = Orders.ApplyFromQuery(OrderString);
            else
                Orders = Orders.ApplyDefaults();

            var orders = Orders.Where(o => o.Position > 0).OrderBy(o => o.Position)
            .Select(o => o as SearchOrder).ToList();
            BookList = await BookClient.SearchAsync(new GetSearchValuesRequest(SearchTerms, orders));
            Console.WriteLine($"{BookList.Count()} books found");
            StateHasChanged();
        }

    }


    private async void OrderChanged(List<SearchOrder> orders)
    {
        // save order for query
        await LocalStorage.SetItemAsStringAsync(SearchTerms.ToUrl(), Orders.ToUrl().Replace("/order/",""));

        var url = Orders.ToUrl(SearchTerms.ToUrl("/books/"));
        NavigationManager.NavigateTo(url);
    }

}