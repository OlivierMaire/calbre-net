@page "/custom-pages/"
@attribute [StreamRendering]
@inject PageClient PageClient

<PageTitle>Custom Pages</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Custom Pages</MudText>

<MudDataGrid T="CustomPageDto" Items="@Pages" EditMode="DataGridEditMode.Form" Bordered="true" Dense="true"
    EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        @* <PropertyColumn Property="x => x.Id" Title="#" IsEditable="false" /> *@
        <PropertyColumn Property="x => x.OrderPosition" Title="Pos." />
        <PropertyColumn Property="x => x.Public" Title="Public" />
        <PropertyColumn Property="x => x.Title" Title="Title" />
        <PropertyColumn Property="x => x.CreatedAt" Title="Created At" IsEditable="false" />
        <PropertyColumn Property="x => x.UpdatedAt" Title="Updated At" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                OnClick="@context.Actions.StartEditingItemAsync" /> *@
                <PageForm @rendermode="InteractiveAuto" PageModel="@context.Item" />

            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ToolBarContent>
        <PageForm @rendermode="InteractiveAuto" />
    </ToolBarContent>
</MudDataGrid>

@code
{

    public List<CustomPageDto> Pages { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var response = await PageClient.AllAsync();
        if (response != null)
            Pages = response.Pages;
    }


}