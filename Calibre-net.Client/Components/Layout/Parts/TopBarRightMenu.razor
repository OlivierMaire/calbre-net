@inject LayoutService LayoutService
@using Calibre_net.Client.Enums
@implements IDisposable
@inject AuthenticationStateProvider auth

<MudNavMenu Class="@Class">

    <MudTooltip Duration="1000"
        Text="@(LayoutService.DarkModeToggle == DarkLightMode.System ? "Switch to Light mode" : LayoutService.DarkModeToggle == DarkLightMode.Dark ? "Switch to System mode" : "Switch to Dark mode")">
        <MudIconButton Class="px-4"
            Icon="@(LayoutService.DarkModeToggle == DarkLightMode.System ? @Icons.Material.Filled.AutoMode : LayoutService.DarkModeToggle == DarkLightMode.Dark ? @Icons.Material.Outlined.DarkMode : @Icons.Material.Rounded.LightMode)"
            Color="Color.Inherit" OnClick="@LayoutService.ToggleDarkMode" />
    </MudTooltip>

    <div class="px-4"> @System.Globalization.CultureInfo.CurrentCulture.Name</div>

    <AuthorizeView>
        <Authorized>

            <AuthorizeView Policy="Admin" Context="AuthContext">
                <MudNavLink Class="w-auto" Href="Admin" Match="NavLinkMatch.Prefix"
                    Icon="@Icons.Material.Filled.SettingsApplications" IconColor="Color.Inherit">Admin</MudNavLink>
            </AuthorizeView>
            <MudNavLink Class="w-auto" Href="Account/Manage" Match="NavLinkMatch.Prefix"
                Icon="@Icons.Material.Filled.AccountBox" IconColor="Color.Inherit">@context.User.Identity?.Name
            </MudNavLink>
            <MudNavLink Class="w-auto" Href="Account/Logout" Match="NavLinkMatch.Prefix"
                Icon="@Icons.Material.Filled.Logout" IconColor="Color.Inherit">Logout</MudNavLink>

        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login"
                IconColor="Color.Inherit">Login</MudNavLink>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PersonAdd"
                IconColor="Color.Inherit">Register</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>

</MudNavMenu>

@code
{

    [Parameter] public string Class { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccured += LayoutServiceOnMajorUpdateOccured;
    }

    private void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e) => StateHasChanged();

    void IDisposable.Dispose()
    {
        LayoutService.MajorUpdateOccured -= LayoutServiceOnMajorUpdateOccured;
    }



}