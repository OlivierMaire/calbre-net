@using System.Collections
@using System.Linq
@inject ApiClients.BookClient BookClient
@if (Book != null)
{
    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled"
        DotStyle="border: solid; border-color: var(--mud-palette-warning); background-color: transparent;">
        <ItemContent>
            <Calibre_net.Client.Pages.Shared.BookThumb CalibreBook="@Book" Class="timeline" />
        </ItemContent>
        <ItemOpposite>
            <MudText Color="Color.Warning">@GetOpositeValue()</MudText>
            <MudText Color="Color.Default" Typo="Typo.body2">@Comment</MudText>
        </ItemOpposite>
    </MudTimelineItem>
}

@code {
    [Parameter] public BookDto? Book { get; set; } = null;
    [Parameter] public int? BookId { get; set; } = null;
    [Parameter] public string Comment { get; set; } = string.Empty;

    [Parameter] public string OpositePath { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Book == null && BookId != null)
        {
            Book = await BookClient.BookAsync(BookId.Value);
        }
    }

    public string GetOpositeValue()
    {
        string propertyPath = OpositePath;//"CustomColumns[2].Value.Data[0].Value";

        if (string.IsNullOrEmpty(propertyPath))
            return string.Empty;

        var propertyNames = propertyPath.Split('.');
        if (Book == null)
            return string.Empty;

        object? currentObject = Book;
        if (currentObject == null)
            return string.Empty;

        foreach (var propertyName in propertyNames)
        {
            int? arrayIndex = null;
            string name = propertyName;
            if (propertyName.Contains("["))
            {
                arrayIndex = int.Parse(propertyName.Split("[")[1].Trim(']'));
                name = propertyName.Split("[")[0];
            }

            var propertyInfo = currentObject?.GetType().GetProperty(name);
            if (propertyInfo == null)
            {
                Console.WriteLine($"Property '{name}' not found.");
                return string.Empty;
            }

            if (propertyInfo.PropertyType.GetInterfaces().Contains(typeof(IEnumerable)) && propertyInfo.PropertyType !=
            typeof(String))
            {
                IEnumerable? collection = (IEnumerable?)propertyInfo.GetValue(currentObject);
                if (collection == null)
                    return string.Empty;
                var enumerator = collection.GetEnumerator();
                enumerator.Reset();
                for (var i = 0; i <= arrayIndex; i++)
                    enumerator.MoveNext();
                currentObject = enumerator.Current;
            }
            else
                currentObject = propertyInfo?.GetValue(currentObject);
        }

        if (currentObject != null)
        {
            if (string.IsNullOrEmpty(Comment) && currentObject?.ToString().IndexOf('|') > 0)
            {
                var split = currentObject.ToString()?.Split("|");
                Comment = split[1] ?? string.Empty;
                return split[0];
            }
            return currentObject?.ToString() ?? string.Empty;
        }

        return string.Empty;
    }
}