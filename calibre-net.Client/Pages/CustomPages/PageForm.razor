@using Calibre_net.Shared.Validators
@inject IDialogService DialogService
@inject PageClient PageClient
@inject NavigationManager NavigationManager

@if (PageModel.Id > 0)
{
    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@OpenDialog" />
    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@DeleteDialog" />
}
else
{
    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenDialog">
        Add a new Page</MudButton>
}


<MudDialog @bind-IsVisible="Visible" Options="@Options" class="w-100">
    <DialogContent>
        <MudForm Model="@PageModel" @ref="@form" Validation="@(pageValidator.ValidateValue)" ValidationDelay="0">
            <MudTextField @bind-Value="PageModel.Title" For="@(() => PageModel.Title)" Immediate="true" Label="Title" />
            <MudTextField @bind-Value="PageModel.Content" For="@(() => PageModel.Content)" Lines="10" Immediate="true"
                Label="Content" Variant="Variant.Outlined" />

            <MudStack Row="true">

                <MudNumericField @bind-Value="PageModel.OrderPosition" For="@(() => PageModel.OrderPosition)"
                    Label="Order" Variant="Variant.Text" Min="@int.MinValue" Max="@int.MaxValue" />

                <MudSwitch @bind-Value="PageModel.Public" For="@(() => PageModel.Public)"
                    ThumbIcon="@(PageModel.Public==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                    ThumbIconColor="@(PageModel.Public==true ? Color.Success : Color.Error)">Public</MudSwitch>
            </MudStack>

            <MudStack Row="true">
                @if (PageModel.CreatedAt > DateTimeOffset.MinValue)
                {
                    <MudField Label="Created At" Variant="Variant.Text" ReadOnly> @PageModel.CreatedAt.ToString()
                    </MudField>
                }
                @if (PageModel.CreatedAt > DateTimeOffset.MinValue)
                {
                    <MudField Label="Updated At" Variant="Variant.Text" ReadOnly> @PageModel.UpdatedAt.ToString()
                    </MudField>
                }
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="@(async () => await Submit())">
            @(PageModel.Id > 0 ? "Edit" : "Add")

        </MudButton>
    </DialogActions>
</MudDialog>

@code {



    private bool Visible { get; set; } = false;
    private void OpenDialog() => Visible = true;

    private void Cancel() => Visible = false;

    private DialogOptions Options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            DisableBackdropClick = true
        };

    private async Task Submit()
    {
        await form.Validate();

        // now validate tne *entire* model
        @* var result = await pageValidator.ValidateAsync(PageModel); *@


        if (form.IsValid)
        {
            var response = await PageClient.PagePutAsync(new PutCustomPageRequest(PageModel));
            if (response != null)
            {
                PageModel = response;
                Visible = false;
                NavigationManager.NavigateTo("/custom-pages");
            }
        }

    }

    private async Task DeleteDialog()
    {
        var parameters = new DialogParameters<MessageDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this Custom Page? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<MessageDialog>("Delete", parameters, options).Result;
        if (!result.Canceled)
        {
            await PageClient.PageDeleteAsync(PageModel.Id);
            NavigationManager.NavigateTo("/custom-pages");
        }

    }


    bool success;
    string[] errors = { };

    MudForm form;
    [Parameter] public CustomPageDto PageModel { get; set; } = new();


    CustomPageValidator pageValidator = new();


    protected override async Task OnInitializedAsync()
    {
        pageValidator.ValidateValue = async (model, propertyName) =>
        {
            var result = await pageValidator.ValidateAsync(
    FluentValidation.ValidationContext
    <CustomPageDto>
    .CreateWithOptions((CustomPageDto)PageModel, x =>
    x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

}