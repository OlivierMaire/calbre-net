@using calibre_net.Shared.Contracts
@using calibre_net.Shared

@inject CategoryClient CategoryClient

@page "/books/{categoryType}"
@attribute [StreamRendering]


CAT @CategoryType

<div class="category-results">
    <MudList Clickable="true" class="category-list">
        @foreach (var category in Categories)
        {
            <a href="@category.SearchUrl">
                    <MudBadge Content="@category.BookCount" Overlap="true" Origin="Origin.CenterRight" Color="Color.Primary"
                       >
                <MudListItem Class="pr-10">
                        @if (CategoryType == "ratings")
                        {
 <calibre_net.Client.Components.Shared.StarRatingDisplay Value="@int.Parse(category.Name)" />
                        }
                        else
                        {
                            @category.Name
                        }
                </MudListItem>
                    </MudBadge>
            </a>
        }
    </MudList>
</div>


@code
{
    [Parameter]
    public string CategoryType { get; set; }

    public List<GenericCategoryCount> Categories { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        Categories = CategoryType switch
        {
            "tags" => (await CategoryClient.TagsAsync()).Tags.ProjectToCategoryCount().ToList(),
            "series" => (await CategoryClient.SeriesAsync()).Series.ProjectToCategoryCount().ToList(),
            "authors" => (await CategoryClient.AuthorsAsync()).Authors.ProjectToCategoryCount().ToList(),
            "publishers" => (await CategoryClient.PublishersAsync()).Publishers.ProjectToCategoryCount().ToList(),
            "languages" => (await CategoryClient.LanguagesAsync()).Languages.ProjectToCategoryCount().ToList(),
            "ratings" => (await CategoryClient.RatingsAsync()).Rating.ProjectToCategoryCount().ToList(),
            "formats" => (await CategoryClient.FormatsAsync()).Formats.ProjectToCategoryCount().ToList(),
            _ => CategoryType.StartsWith("cc_") ? await HandleCustomColumns() : [],
        };

        Categories = Categories.OrderBy(c => string.IsNullOrEmpty(c.Sort) ? c.Name : c.Sort).ToList();
    }
    
    private async Task<List<GenericCategoryCount>> HandleCustomColumns()
        {
            var colIdAsString = CategoryType.Replace("cc_", "");
           if ( !int.TryParse(colIdAsString, out var colId) )
           return [];

           var response = (await CategoryClient.Custom_columnAsync(colId));
           if (response != null)
           {
                return response.CustomColumns.ProjectToCategoryCount().ToList();
           }

           return [];
           
        }



}
