@using calibre_net.Shared.Contracts
@using calibre_net.Shared

@page "/books/{*pageRoute}"
@attribute [StreamRendering]

@inject ApiClients.BookClient BookClient


Search

<p>
    PageRoute: @PageRoute
</p>

<p>
    @foreach (var (k, v) in DICT)
    {
    <p>@k : @v</p>
    }
</p>


@if (BookList == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{

    <MudContainer Class="d-flex flex-row gap-2 flex-wrap flex-wrap-anim" MaxWidth="MaxWidth.False">
        @foreach (var book in BookList)
        {
            <BookThumb CalibreBook="@book" />
        }
    </MudContainer>


}


@code {
    [Parameter]
    public string? PageRoute { get; set; }

    public Dictionary<string, object> DICT = [];
    public SearchRequest req = new();

    ICollection<BookDto> BookList { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        var dict = ParseStringToDictionary(PageRoute);
        DICT = dict;

        @* calibre_net.Shared.Contacts.SearchRequest req = new(); *@
        var req = dict.ToObject<SearchRequest>();

        if (dict.Keys.Any(k => k.StartsWith("cc_")))
        {
           req.CustomColumn = dict.Where(d => d.Key.StartsWith("cc_"))
            .Select(d => 
            {
                var key = int.Parse(d.Key.Replace("cc_", ""));
                int? value = null;
                if (int.TryParse(d.Value.ToString(), out var parsedValue))
                    value = parsedValue;
               return KeyValuePair.Create(key, value);
            })
            .ToDictionary();
        }

        if (PageRoute == "top-rated")
        {
            req.RatingValue = 9;
            req.RatingValueOperator = SqlOperator.GreaterOrEquals;
        }


        BookList = await BookClient.SearchAsync(req);
        Console.WriteLine($"{BookList?.Count} books found");

        StateHasChanged();


    }


    static Dictionary<string, object> ParseStringToDictionary(string input)
    {
        var dictionary = new Dictionary<string, object>();
        var pairs = input.Split('/');

        for (int i = 0; i + 1 < pairs.Length; i += 2)
        {
            string key = pairs[i];
            string value = pairs[i + 1];

            // You can convert the value to the appropriate type (e.g., int, double, etc.) if needed.
            dictionary[key] = value;
        }

        return dictionary;
    }


}