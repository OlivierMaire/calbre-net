<div class="d-flex flex-row">
    <div class="star-rating d-flex flex-row" style="@(Disabled ? "opacity:.4;" : "")">

        @if (EditMode)
        {
            <div>
                <MudIconButton Class="px-2 py-0" Icon="@Icons.Material.Filled.RemoveCircle" Color="Color.Primary"
                    OnClick="RemoveStar" Disabled="@(Value <= 0)" />
            </div>
        }

        <div>
            @for (int i = 0; i < fullStar; i++)
            {
                <MudIcon Icon="@Icons.Material.Filled.Star" />
            }
            @for (int i = 0; i < halfStar; i++)
            {
                <MudIcon Icon="@Icons.Material.Filled.StarHalf" />
            }
            @for (int i = 0; i < emptyStar; i++)
            {
                <MudIcon Icon="@Icons.Material.Filled.StarOutline" />
            }
        </div>

        @if (EditMode)
        {
            <div>
                <MudIconButton Class="px-2 py-0" Icon="@Icons.Material.Filled.AddCircle" Color="Color.Primary"
                    OnClick="AddStar" Disabled="@(Value >= Max )" />
            </div>
        }

    </div>
    @if (EditMode && !Disabled)
    {

        <div>
            <MudIconButton Class="px-2 py-0" Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="Disable" />
        </div>
    }
</div>

@code {

    [Parameter] public int? Value { get; set; }
    [Parameter] public int Max { get; set; } = 10;
    [Parameter] public bool EditMode { get; set; } = false;
    [Parameter] public EventCallback<int?> ValueChanged { get; set; }

    public int fullStar => (int)Math.Floor((Value ?? 0) / 2.0m);

    public int halfStar => (Value ?? 0) - (fullStar * 2);
    public int emptyStar => (Max / 2) - fullStar - halfStar;

    private bool Disabled { get; set; } = true;

    private async void RemoveStar()
    {
        if (Value > 0)
        {
            Value -= 1;
            Disabled = false;
            await ValueChanged.InvokeAsync(Value);
        }
    }
    private async void AddStar()
    {
        if (Value < Max)
        {
            Value += 1;
            Disabled = false;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task Disable()
    {
        Disabled = true;
        if (Disabled)
            await ValueChanged.InvokeAsync(null);
    }
}