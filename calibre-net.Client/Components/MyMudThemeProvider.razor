@rendermode InteractiveAuto

<CascadingValue Value=false Name="UsePopoverProvider">
    @* <MudThemeProvider Theme="MyTheme" @ref="MudThemeProvider" @bind-IsDarkMode="@IsDarkMode"></MudThemeProvider> *@
@if (OperatingSystem.IsBrowser()){
<MudThemeProvider Theme="MyTheme" @bind-IsDarkMode="@IsDarkMode"  @ref="MudThemeProvider"   />

}
else{
<MudThemeProvider Theme="MyTheme" @bind-IsDarkMode="@IsDarkMode"   />

}
</CascadingValue>

@code {

    [Parameter]
    public bool IsDarkMode {get;set;} = false;

     private MudThemeProvider _mudThemeProvider;
    [Parameter]
    public MudThemeProvider MudThemeProvider 
    {

          get => _mudThemeProvider;
        set
        {
            if (_mudThemeProvider == value ) return;
            _mudThemeProvider = value;
            MudThemeProviderChanged.InvokeAsync(value);
        }
    }
      [Parameter]
    public EventCallback<MudThemeProvider> MudThemeProviderChanged { get; set; }   

    public static MudTheme MyTheme => new()
        {
            Palette = new PaletteLight()
            {
                Primary = "#594AE2",
                AppbarBackground = "#594AE2",
                White = "#FFFFFF"

            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#594AE2",
                AppbarBackground = "#594AE2"
            }
        };

  
}