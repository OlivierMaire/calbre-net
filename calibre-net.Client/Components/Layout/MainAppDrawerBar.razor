@inject IJSRuntime JSRuntime
<MudAppBar Fixed="true" Elevation="0" Dense="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
        OnClick="@((e) => ToggleDrawer())" />
 <MudSpacer />
  <MudIconButton OnClick="ThemeChanged" Color="Color.Inherit" Icon="@(IsDarkTheme ? Icons.Filled.LightMode : Icons.Outlined.DarkMode)" />
  <CultureSelector />
        <TopMenu /> 
</MudAppBar>
<MudDrawer Class="mud-drawer-fixed" Open=_isDrawerOpen >
    <MudDrawerHeader Class="top-row" Dense="true">
        <MudText Style="@($"color:{Colors.Shades.White};")" Typo="Typo.h6">Calibre.Net</MudText>
    </MudDrawerHeader>
    <NavMenu />
</MudDrawer>

@code {
    private bool _isDrawerOpen = true;
    private bool _shouldHandleDrawerToggled = false;
    private IJSObjectReference? _jsModule;

    [CascadingParameter]
    public bool IsDarkTheme { get; set; }
    [CascadingParameter]
    public EventCallback ThemeChanged { get; set; }

    void ToggleDrawer()
    {
        _isDrawerOpen = !_isDrawerOpen;
        _shouldHandleDrawerToggled = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Layout/MainAppDrawerBar.razor.js");
        }
        if (_shouldHandleDrawerToggled)
        {
            await _jsModule!.InvokeVoidAsync("HandleDrawerToggled", _isDrawerOpen);
            _shouldHandleDrawerToggled = false;
        }
    }

}