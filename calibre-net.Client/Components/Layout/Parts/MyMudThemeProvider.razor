@rendermode InteractiveAuto
@using calibre_net.CustomEvents
@inject IJSRuntime JS
@implements IDisposable
@inject PersistentComponentState ApplicationState

<div class="themeChangedEventHandler" @onthemechangedevent="HandleCustomEvent" style="display: none;"></div>
<CascadingValue Value=false Name="UsePopoverProvider">
    <MudThemeProvider Theme="MyTheme" @bind-IsDarkMode="@_isDarkMode" />
</CascadingValue>


@code {

    [CascadingParameter(Name = "DarkModeCookie")]
    private bool _isDarkMode { get; set; }

    public static MudTheme MyTheme => new()
        {
            Palette = new PaletteLight()
            {
                Primary = "#594AE2",
                AppbarBackground = "#594AE2",
                White = "#FFFFFF"

            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#594AE2",
                AppbarBackground = "#594AE2"
            }
        };

    private void HandleCustomEvent(ThemeChangedEvent eventArgs)
    {
        @* Console.WriteLine("Event fired"); *@
        if (eventArgs != null)
        {
            @* Console.WriteLine($"Is Dark ? {eventArgs.IsDarkMode} "); *@
            _isDarkMode = eventArgs.IsDarkMode;
        }
    }

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription =
        ApplicationState.RegisterOnPersisting(PersistData);

        if (ApplicationState.TryTakeFromJson<bool>(
        "DarkModeCookie", out var restored))
            _isDarkMode = restored!;

    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("DarkModeCookie", _isDarkMode);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

}